// Generated by CoffeeScript 1.6.2
var Chainable, chainable, slice, wrapper;

slice = Array.prototype.slice;

Chainable = (function() {
  function Chainable() {
    this.__queue = [];
  }

  Chainable.prototype.__add = function(fn, args) {
    return this.__queue.push([fn, args]);
  };

  Chainable.prototype.__end = function(callback) {
    var iterate, result,
      _this = this;

    result = null;
    iterate = function() {
      var args, fn, _ref;

      _ref = _this.__queue.shift(), fn = _ref[0], args = _ref[1];
      args.push(function() {
        var err;

        result = slice.call(arguments, 0);
        if ((err = result.shift()) != null) {
          return callback(err);
        }
        if (_this.__queue.length === 0) {
          return callback();
        } else {
          return iterate();
        }
      });
      return fn.apply(_this, args);
    };
    return iterate();
  };

  return Chainable;

})();

chainable = function(fn) {
  return function() {
    var args,
      _this = this;

    args = slice.call(arguments, 0);
    if (fn.length === args.length) {
      if (this.__queue.length > 0) {
        this.__end(function(err) {
          if (err != null) {
            return args.pop()(err);
          }
          return fn.apply(_this, args);
        });
      } else {
        fn.apply(this, args);
      }
    } else {
      this.__add(fn, args);
    }
    return this;
  };
};

wrapper = function(fn) {
  if (this.constructor === wrapper) {
    return new Chainable();
  }
  return chainable(fn);
};

wrapper.prototype = Chainable.prototype;

wrapper.Chainable = Chainable;

wrapper.chainable = chainable;

module.exports = wrapper;

/*
//@ sourceMappingURL=index.map
*/
